@Plan:name('RealtimeAnalytics-ExecutionPlan-ProductOfferGenerator')

@Plan:description('Based on the proximity of the user, send offers to the user')


@Import('org.wso2.realtime.analytics.stream.CustomerLocation:1.0.0')
define stream CustomerLocationStream (meta_timestamp long, customerId string, floorNumber int, shelfNumber int);

@Export('org.wso2.realtime.analytics.stream.SendOffer:1.0.0')
define stream SendOfferStream (meta_userId string, meta_timestamp long, productName string, offerName string, offerDescription string, expirationDate long);

@IndexBy('id')
@From(eventtable='rdbms', datasource.name='WSO2_REALTIME_ANALYTICS_BEACON', table.name='ORG_WSO2_REALTIME_ANALYTICS_EVENT_TABLE_ITEM')
define table ItemEventTable (id string, name string, category string, floorNumber int, shelfNumber int, offerId string);

@IndexBy('id')
@From(eventtable='rdbms', datasource.name='WSO2_REALTIME_ANALYTICS_BEACON', table.name='ORG_WSO2_REALTIME_ANALYTICS_EVENT_TABLE_OFFER')
define table OfferEventTable (id string, name string, description string, expirationDate long);

/* Find if the user is in the same location continuously more than 5 seconds */
from every(loc1 = CustomerLocationStream) -> loc2 = CustomerLocationStream[(meta_timestamp > loc1.meta_timestamp) AND (floorNumber == loc1.floorNumber) AND (shelfNumber == loc1.shelfNumber)]<0:> -> loc3 = CustomerLocationStream[(meta_timestamp >= loc1.meta_timestamp + 30000) AND (floorNumber == loc1.floorNumber) AND (shelfNumber == loc1.shelfNumber)]
within 5 sec
select loc1.customerId as userId, loc3.meta_timestamp as timestamp, loc1.floorNumber as floorNumber, loc1.shelfNumber as shelfNumber
insert into #ProximityStream;

/* Find if the event is triggered for the same series of events. The same pattern identified within a day is ignored to avoid spaming. For testing purpose 5 minutes is used */
from #ProximityStream as leftStream left outer join #ProximityStream#window.time(5 minutes) as rightStream on leftStream.userId == rightStream.userId AND leftStream.floorNumber == rightStream.floorNumber AND leftStream.shelfNumber == rightStream.shelfNumber
select leftStream.userId as userId, leftStream.timestamp as timestamp, leftStream.floorNumber as floorNumber, leftStream.shelfNumber as shelfNumber, rightStream.userId IS NULL as isNewEvent
insert into #ProximityPerDayStream;

/* Allow only new event patterns to trigger offer */
from #ProximityPerDayStream[isNewEvent]
select userId, timestamp, floorNumber, shelfNumber
insert into #FilteredProximityStream;

/* Find whether the product has an offer */
from #FilteredProximityStream as proximity join ItemEventTable as item on proximity.floorNumber == item.floorNumber AND proximity.shelfNumber == item.shelfNumber AND item.offerId != "N/A"
select proximity.userId as userId, proximity.timestamp as timestamp, item.id as itemId, item.name as productName, item.offerId as offerId
insert into #ItemStream;

/* Validate offer expiary peiod and send the offer */
from #ItemStream as item join OfferEventTable as offer on item.offerId == offer.id AND item.timestamp <= offer.expirationDate
select item.userId as meta_userId, item.timestamp as meta_timestamp, item.productName as productName, offer.name as offerName, offer.description as offerDescription, offer.expirationDate as expirationDate
insert into SendOfferStream;